import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from settings import SETTINGS
from tiktok import music_id_from_input, fetch_music_videos

bot = Bot(token=SETTINGS.bot_token)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–æ–≤
trackers = {}  # user_id -> {music_id, last_ts}


def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üéµ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–≤—É–∫", callback_data="track_sound")],
    ])


@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –ø–æ –∑–≤—É–∫—É TikTok.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∑–≤—É–∫.",
        reply_markup=main_menu()
    )


@dp.callback_query(lambda c: c.data == "track_sound")
async def process_track_sound(callback: types.CallbackQuery):
    await callback.message.answer("üéµ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –∑–≤—É–∫–∞ TikTok:")
    await callback.answer()


@dp.message()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    music_id = music_id_from_input(message.text)

    if not music_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å sound ID. –ü—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —á–∏—Å–ª–æ.")
        return

    await message.answer(f"üîé –ò—â—É –≤–∏–¥–µ–æ –ø–æ –∑–≤—É–∫—É `{music_id}`...")

    videos, last_ts = await fetch_music_videos(music_id)
    if not videos:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ —Å —ç—Ç–∏–º –∑–≤—É–∫–æ–º.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫–µ—Ä
    trackers[user_id] = {"music_id": music_id, "last_ts": last_ts}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
    text = "\n".join(f"‚ñ∂Ô∏è {v['url']}" for v in videos)
    await message.answer(f"–ù–∞—à—ë–ª {len(videos)} –≤–∏–¥–µ–æ:\n\n{text}\n\n‚úÖ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏!")


async def tracker_loop():
    while True:
        for user_id, data in list(trackers.items()):
            music_id = data["music_id"]
            last_ts = data["last_ts"]

            try:
                videos, new_last_ts = await fetch_music_videos(music_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {music_id}: {e}")
                continue

            new_videos = [v for v in videos if v["ts"] > last_ts]
            if new_videos:
                trackers[user_id]["last_ts"] = max(v["ts"] for v in new_videos)
                text = "\n".join(f"üÜï {v['url']}" for v in new_videos)
                await bot.send_message(user_id, f"üé¨ –ù–æ–≤—ã–µ –≤–∏–¥–µ–æ –ø–æ –∑–≤—É–∫—É {music_id}:\n\n{text}")

        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É


async def main():
    asyncio.create_task(tracker_loop())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
    
