from __future__ import annotations
import asyncio
from datetime import datetime, timezone
from typing import Optional

from aiogram import Dispatcher, Bot
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from .settings import SETTINGS
from .storage import open_db, list_sounds, upsert_sound, subscribe, unsubscribe, subscribers
from .tiktok import fetch_music_videos, music_id_from_input, discover_new_sounds_by_hashtag, MUSIC_URL_FMT

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=SETTINGS.telegram_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class TrackSound(StatesGroup):
    waiting_for_link = State()

class TrackHashtag(StatesGroup):
    waiting_for_tag = State()

class SetInterval(StatesGroup):
    waiting_for_minutes = State()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üéµ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–≤—É–∫", callback_data="track_sound")],
        [InlineKeyboardButton("üìÑ –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö", callback_data="list_sounds")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–≤—É–∫", callback_data="untrack_sound")],
        [InlineKeyboardButton("#Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ö—ç—à—Ç–µ–≥", callback_data="track_hashtag")],
        [InlineKeyboardButton("üóë –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ö—ç—à—Ç–µ–≥–∞", callback_data="untrack_hashtag")],
        [InlineKeyboardButton("‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="set_interval")],
    ])
    return kb

# === /start ===
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:", reply_markup=main_menu())

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π ===
@dp.callback_query()
async def cb_handler(c: CallbackQuery, state: FSMContext):
    data = c.data
    if data == "track_sound":
        await c.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –∑–≤—É–∫–∞:")
        await state.set_state(TrackSound.waiting_for_link)
    elif data == "track_hashtag":
        await c.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ (–±–µ–∑ #):")
        await state.set_state(TrackHashtag.waiting_for_tag)
    elif data == "list_sounds":
        with open_db() as conn:
            sounds = list_sounds(conn)
        if not sounds:
            await c.message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        else:
            kb = InlineKeyboardMarkup()
            for mid, title, _ in sounds:
                kb.add(InlineKeyboardButton(f"{title or mid} ‚ùå", callback_data=f"del_sound:{mid}"))
            await c.message.answer("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∑–≤—É–∫–æ–≤:", reply_markup=kb)
    elif data.startswith("del_sound:"):
        mid = data.split(":", 1)[1]
        with open_db() as conn:
            unsubscribe(conn, c.message.chat.id, "sound", mid)
        await c.message.answer(f"–£–¥–∞–ª–µ–Ω–æ: {mid}")
    elif data == "set_interval":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("1 –º–∏–Ω", callback_data="interval:60"),
             InlineKeyboardButton("3 –º–∏–Ω", callback_data="interval:180"),
             InlineKeyboardButton("5 –º–∏–Ω", callback_data="interval:300")],
        ])
        await c.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=kb)
    elif data.startswith("interval:"):
        sec = int(data.split(":", 1)[1])
        import os
        os.environ["POLL_INTERVAL_SEC"] = str(sec)
        await c.message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {sec // 60} –º–∏–Ω.")

# === FSM —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
@dp.message(TrackSound.waiting_for_link)
async def fsm_track_sound(m: Message, state: FSMContext):
    mid = music_id_from_input(m.text)
    if not mid:
        await m.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å music_id.")
        return
    with open_db() as conn:
        upsert_sound(conn, mid, title=f"sound {mid}", last_ts=0)
        subscribe(conn, m.chat.id, "sound", mid)
    await m.reply(f"‚úÖ –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: <code>{mid}</code>\n{MUSIC_URL_FMT.format(mid=mid)}", reply_markup=main_menu())
    await state.clear()

@dp.message(TrackHashtag.waiting_for_tag)
async def fsm_track_hashtag(m: Message, state: FSMContext):
    tag = m.text.strip().lstrip("#")
    with open_db() as conn:
        conn.execute("INSERT OR IGNORE INTO tracked_hashtags(tag) VALUES(?)", (tag,))
        subscribe(conn, m.chat.id, "hashtag", tag)
    await m.reply(f"‚úÖ –•—ç—à—Ç–µ–≥ –¥–æ–±–∞–≤–ª–µ–Ω: <b>#{tag}</b>", reply_markup=main_menu())
    await state.clear()

# === Scheduler –¥–ª—è –≤–∏–¥–µ–æ/—Ö—ç—à—Ç–µ–≥–æ–≤ ===
async def notify_new_videos(music_id: str):
    items, title = await fetch_music_videos(music_id, http_proxy=SETTINGS.http_proxy, limit=50)
    with open_db() as conn:
        last_ts, last_ids = conn.cursor().execute(
            "SELECT last_ts, last_ids FROM tracked_sounds WHERE music_id=?", (music_id,)
        ).fetchone() or (0, "[]")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π update —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ

async def scheduler_loop():
    while True:
        try:
            with open_db() as conn:
                sound_ids = [r[0] for r in conn.execute("SELECT music_id FROM tracked_sounds").fetchall()]
            for mid in sound_ids:
                await notify_new_videos(mid)
            # –¢—É—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
        except Exception as e:
            if SETTINGS.admin_chat_id:
                await bot.send_message(SETTINGS.admin_chat_id, f"Scheduler error: {e}")
        await asyncio.sleep(SETTINGS.poll_interval_sec)

# === Main ===
async def main():
    if not SETTINGS.telegram_token:
        raise SystemExit("TELEGRAM_TOKEN –ø—É—Å—Ç–æ–π")
    asyncio.create_task(scheduler_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
    
