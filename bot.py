import asyncio
import json
import os
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL"))  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ

if not TOKEN:
    raise ValueError("‚ùå –£–∫–∞–∂–∏ TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# --- –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö ---
HISTORY_FILE = 'seen_videos.json'
SOUNDS_FILE = 'sounds.json'
SOUNDS_PER_PAGE = 5

# === –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ===
if not os.path.exists(HISTORY_FILE):
    with open(HISTORY_FILE, 'w') as f:
        json.dump({}, f)

if not os.path.exists(SOUNDS_FILE):
    with open(SOUNDS_FILE, 'w') as f:
        json.dump([], f)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
with open(HISTORY_FILE, 'r') as f:
    seen_videos = json.load(f)

with open(SOUNDS_FILE, 'r') as f:
    SOUND_URLS = json.load(f)

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class AddSoundStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_name = State()

# === –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)
OWNER_ID = None
rename_state = {}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_keyboard():
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data="add_sound"),
                types.InlineKeyboardButton(text="üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤", callback_data="list_sounds")
            ]
        ]
    )
    return kb

def build_sounds_keyboard(page: int = 0):
    start = page * SOUNDS_PER_PAGE
    end = start + SOUNDS_PER_PAGE
    sounds_page = SOUND_URLS[start:end]
    if not sounds_page:
        return None

    inline_keyboard = []
    for i, sound in enumerate(sounds_page, start=start):
        inline_keyboard.append([
            types.InlineKeyboardButton(
                text=f"üóë {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}",
                callback_data=f"remove_sound_{i}"
            ),
            types.InlineKeyboardButton(
                text=f"‚úèÔ∏è {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}",
                callback_data=f"rename_sound_{i}"
            ),
            types.InlineKeyboardButton(
                text=f"üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ",
                callback_data=f"last_videos_{i}"
            )
        ])

    inline_keyboard.append([types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data="add_sound")])

    nav_buttons = []
    if start > 0:
        nav_buttons.append(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'page_{page-1}'))
    if end < len(SOUND_URLS):
        nav_buttons.append(types.InlineKeyboardButton(text='‚û°Ô∏è –í–ø–µ—Ä—ë–¥', callback_data=f'page_{page+1}'))
    if nav_buttons:
        inline_keyboard.append(nav_buttons)

    return types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ ===
async def check_new_videos():
    global seen_videos, SOUND_URLS
    while True:
        for idx, sound in enumerate(SOUND_URLS):
            sound_url = sound['url']
            sound_name = sound.get('name') or f'#{idx+1}'
            try:
                r = requests.get(sound_url, headers={"User-Agent": "Mozilla/5.0"})
                soup = BeautifulSoup(r.text, "html.parser")
                video_elements = [a["href"] for a in soup.find_all("a", href=True) if "/video/" in a["href"]]
                for video_url in video_elements:
                    if sound_url not in seen_videos:
                        seen_videos[sound_url] = []
                    if video_url not in seen_videos[sound_url]:
                        seen_videos[sound_url].append(video_url)
                        with open(HISTORY_FILE, 'w') as f:
                            json.dump(seen_videos, f)

                        kb_inline = types.InlineKeyboardMarkup(
                            inline_keyboard=[
                                [types.InlineKeyboardButton(text="‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ TikTok", url=video_url)]
                            ]
                        )
                        await bot.send_message(chat_id=OWNER_ID, text=f"üÜï –ù–æ–≤—ã–π —Ä–æ–ª–∏–∫ –ø–æ–¥ –∑–≤—É–∫–æ–º: {sound_name}", reply_markup=kb_inline)

            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∏–¥–µ–æ:", e)
        await asyncio.sleep(CHECK_INTERVAL)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@dp.message(Command("start"))
async def start_cmd(message: Message):
    global OWNER_ID
    OWNER_ID = message.chat.id
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=get_main_keyboard())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞
@dp.callback_query(lambda c: c.data == "add_sound")
async def inline_add_sound(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–≤—É–∫ TikTok:")
    await state.set_state(AddSoundStates.waiting_for_url)
    await callback.answer()

@dp.message(AddSoundStates.waiting_for_url)
async def add_sound_get_url(message: Message, state: FSMContext):
    await state.update_data(url=message.text)
    await message.answer("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
    await state.set_state(AddSoundStates.waiting_for_name)

@dp.message(AddSoundStates.waiting_for_name)
async def add_sound_get_name(message: Message, state: FSMContext):
    data = await state.get_data()
    url = data['url']
    name = message.text if message.text.lower() != '–Ω–µ—Ç' else None
    SOUND_URLS.append({'url': url, 'name': name})
    with open(SOUNDS_FILE, 'w') as f:
        json.dump(SOUND_URLS, f)
    await message.answer(f"‚úÖ –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {name or url}", reply_markup=get_main_keyboard())
    await state.clear()

# –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤
@dp.callback_query(lambda c: c.data == "list_sounds")
async def callback_list_sounds(callback: CallbackQuery):
    kb = build_sounds_keyboard()
    if kb:
        await callback.message.answer("üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤:", reply_markup=kb)
    else:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
@dp.callback_query(lambda c: c.data.startswith("remove_sound_"))
async def callback_remove_sound(callback: CallbackQuery):
    idx = int(callback.data.split("_")[-1])
    if 0 <= idx < len(SOUND_URLS):
        removed = SOUND_URLS.pop(idx)
        with open(SOUNDS_FILE, 'w') as f:
            json.dump(SOUND_URLS, f)
        await callback.message.edit_text(f"üóë –ó–≤—É–∫ —É–¥–∞–ª—ë–Ω: {removed.get('name') or removed['url']}", reply_markup=get_main_keyboard())
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("rename_sound_"))
async def callback_rename_sound(callback: CallbackQuery):
    idx = int(callback.data.split("_")[-1])
    rename_state[callback.from_user.id] = idx
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:")
    await callback.answer()

@dp.message()
async def handle_rename(message: Message):
    if message.from_user.id in rename_state:
        idx = rename_state.pop(message.from_user.id)
        SOUND_URLS[idx]['name'] = message.text
        with open(SOUNDS_FILE, 'w') as f:
            json.dump(SOUND_URLS, f)
        await message.answer(f"‚úÖ –ó–≤—É–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {message.text}", reply_markup=get_main_keyboard())

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ
@dp.callback_query(lambda c: c.data.startswith("last_videos_"))
async def callback_last_videos(callback: CallbackQuery):
    idx = int(callback.data.split("_")[-1])
    sound_url = SOUND_URLS[idx]['url']
    last_videos = seen_videos.get(sound_url, [])[-5:]

    if not last_videos:
        await callback.answer("‚ùå –í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
        return

    text = f"üé¨ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–¥ –∑–≤—É–∫–æ–º {SOUND_URLS[idx].get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}:\n"
    for i, v in enumerate(last_videos, start=1):
        text += f"{i}. {v}\n"

    await callback.message.answer(text)
    await callback.answer()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    asyncio.create_task(check_new_videos())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
