import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")  # –∫–æ–º—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
if not BOT_TOKEN:
    raise ValueError("‚ùå –£–∫–∞–∂–∏ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
CHECK_INTERVAL = 60  # —Ä–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ---
SOUND_URLS = []
last_videos = {}

# ==== –°–æ—Å—Ç–æ—è–Ω–∏—è ====
class AddSound(StatesGroup):
    waiting_for_url = State()


# ==== –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ TikTok ====
async def fetch_last_videos(sound_url, limit=5):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ TikTok.
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä API / playwright / selenium.
    –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏.
    """
    return [f"{sound_url}?video={i}" for i in range(1, limit + 1)]


# ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ ====
async def check_new_videos():
    while True:
        for sound in SOUND_URLS:
            try:
                new_videos = await fetch_last_videos(sound)
                old = set(last_videos.get(sound, []))
                fresh = [v for v in new_videos if v not in old]

                if fresh:
                    last_videos[sound] = new_videos
                    for video in fresh:
                        msg = f"üì¢ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –ø–æ –∑–≤—É–∫—É:\n{sound}\n‚ñ∂ {video}"
                        if CHAT_ID:
                            await bot.send_message(CHAT_ID, msg)

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–≤—É–∫–∞ {sound}: {e}")

        await asyncio.sleep(CHECK_INTERVAL)


# ==== –ö–Ω–æ–ø–∫–∏ ====
def main_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéµ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ", callback_data="last5")],
        [InlineKeyboardButton(text="üéß –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤", callback_data="list_sounds")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data="add_sound")]
    ])
    return kb


# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ====
@dp.message(F.text == "/start")
async def start_cmd(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø TikTok –±–æ—Ç.\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())


@dp.callback_query(F.data == "last5")
async def last5_videos(callback: types.CallbackQuery):
    if not SOUND_URLS:
        await callback.message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å —Å—Å—ã–ª–∫–∏ –∫–Ω–æ–ø–∫–æ–π '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫'")
        await callback.answer()
        return

    text = "üéµ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–≤—É–∫—É:\n\n"
    for sound in SOUND_URLS:
        videos = await fetch_last_videos(sound, 5)
        last_videos[sound] = videos
        text += f"\nüîä {sound}\n"
        for v in videos:
            text += f"‚ñ∂ {v}\n"
    await callback.message.answer(text)
    await callback.answer()


@dp.callback_query(F.data == "list_sounds")
async def list_sounds(callback: types.CallbackQuery):
    if not SOUND_URLS:
        await callback.message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤ –ø—É—Å—Ç.")
        await callback.answer()
        return

    text = "üéß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–≤—É–∫–∏:\n\n"
    for i, url in enumerate(SOUND_URLS, start=1):
        text += f"{i}. {url}\n"

    await callback.message.answer(text)
    await callback.answer()


@dp.callback_query(F.data == "add_sound")
async def add_sound(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üîó –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–≤—É–∫ TikTok:")
    await state.set_state(AddSound.waiting_for_url)
    await callback.answer()


@dp.message(AddSound.waiting_for_url)
async def process_add_sound(message: types.Message, state: FSMContext):
    url = message.text.strip()
    if not url.startswith("http"):
        await message.answer("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    SOUND_URLS.append(url)
    last_videos[url] = []
    await message.answer(f"‚úÖ –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n–¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é:\n{url}", reply_markup=main_keyboard())
    await state.clear()


# ==== –ó–∞–ø—É—Å–∫ ====
async def main():
    asyncio.create_task(check_new_videos())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
