import asyncio
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import os
import json

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN", "8098428478:AAGJJKaREHjQgGPFudgyH1pc_UzzqJUrcgE")
CHECK_INTERVAL = 300  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
HISTORY_FILE = 'seen_videos.json'
SOUNDS_FILE = 'sounds.json'
SOUNDS_PER_PAGE = 5  # –ö–æ–ª-–≤–æ –∑–≤—É–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

bot = Bot(token=TOKEN)
dp = Dispatcher()
OWNER_ID = None
rename_state = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
seen_videos = {}
SOUND_URLS = []  # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: [{'url':..., 'name':...}]

# === –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò ===
if os.path.exists(HISTORY_FILE):
    with open(HISTORY_FILE, 'r') as f:
        try:
            seen_videos = json.load(f)
        except:
            seen_videos = {}

# === –ó–ê–ì–†–£–ó–ö–ê –ó–í–£–ö–û–í ===
if os.path.exists(SOUNDS_FILE):
    with open(SOUNDS_FILE, 'r') as f:
        try:
            SOUND_URLS = json.load(f)
        except:
            SOUND_URLS = []

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫'), KeyboardButton('üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤')]
    ],
    resize_keyboard=True
)

# === –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –í–ò–î–ï–û ===
async def check_new_videos():
    global seen_videos, SOUND_URLS
    while True:
        for idx, sound in enumerate(SOUND_URLS):
            sound_url = sound['url']
            sound_name = sound.get('name') or f'#{idx+1}'
            try:
                r = requests.get(sound_url, headers={"User-Agent": "Mozilla/5.0"})
                soup = BeautifulSoup(r.text, "html.parser")

                video_elements = soup.find_all("a", href=True)
                for a in video_elements:
                    if "/video/" in a["href"]:
                        video_url = a["href"]
                        time_tag = a.find_next("span")
                        try:
                            video_time = datetime.strptime(time_tag.text.strip(), '%Y-%m-%d %H:%M')
                        except:
                            video_time = datetime.now()

                        if sound_url not in seen_videos:
                            seen_videos[sound_url] = []

                        if video_url not in seen_videos[sound_url] and video_time > datetime.now() - timedelta(days=1):
                            seen_videos[sound_url].append(video_url)
                            with open(HISTORY_FILE, 'w') as f:
                                json.dump(seen_videos, f)

                            # –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –≤–∏–¥–µ–æ
                            try:
                                r_video = requests.get(video_url, headers={"User-Agent": "Mozilla/5.0"})
                                soup_video = BeautifulSoup(r_video.text, "html.parser")
                                meta_thumb = soup_video.find("meta", property="og:image")
                                thumbnail_url = meta_thumb["content"] if meta_thumb else None
                            except:
                                thumbnail_url = None

                            keyboard_inline = InlineKeyboardMarkup(
                                inline_keyboard=[
                                    [InlineKeyboardButton(text="‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ TikTok", url=video_url)],
                                    [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–≤—É–∫", callback_data=f"remove_sound_{idx}"),
                                     InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∑–≤—É–∫", callback_data=f"rename_sound_{idx}")]
                                ]
                            )

                            caption_text = f"üÜï –ù–æ–≤—ã–π —Ä–æ–ª–∏–∫ –ø–æ–¥ –∑–≤—É–∫–æ–º: {sound_name}"

                            if thumbnail_url:
                                await bot.send_photo(chat_id=OWNER_ID, photo=thumbnail_url, caption=caption_text, reply_markup=keyboard_inline)
                            else:
                                await bot.send_message(chat_id=OWNER_ID, text=caption_text, reply_markup=keyboard_inline)

            except Exception as e:
                print("–û—à–∏–±–∫–∞:", e)

        await asyncio.sleep(CHECK_INTERVAL)

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
@dp.message(Command("start"))
async def start_cmd(message: Message):
    global OWNER_ID
    OWNER_ID = message.chat.id
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=keyboard)

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–í–£–ö–ê ===
@dp.message(Command("add_sound"))
async def add_sound_cmd(message: Message):
    global SOUND_URLS
    parts = message.text.split(maxsplit=2)
    if len(parts) >= 2:
        url = parts[1]
        name = parts[2] if len(parts) == 3 else None
        SOUND_URLS.append({'url': url, 'name': name})
        with open(SOUNDS_FILE, 'w') as f:
            json.dump(SOUND_URLS, f)
        await message.answer(f"‚úÖ –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {name or url}")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_sound <—Å—Å—ã–ª–∫–∞> [–Ω–∞–∑–≤–∞–Ω–∏–µ]")

# === –û–¢–ü–†–ê–í–ö–ê –°–¢–†–ê–ù–ò–¶–´ –°–û –°–ü–ò–°–ö–û–ú –ó–í–£–ö–û–í ===
async def send_sounds_page(message: Message, page: int = 0):
    start = page * SOUNDS_PER_PAGE
    end = start + SOUNDS_PER_PAGE
    sounds_page = SOUND_URLS[start:end]

    if not sounds_page:
        await message.answer("‚ùå –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–≤—É–∫–æ–≤ –Ω–µ—Ç.")
        return

    text = "üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤:\n"
    for i, sound in enumerate(sounds_page, start=start + 1):
        name = sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'
        text += f"{i}. {name} ‚Äî {sound['url']}\n"

    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    for i, sound in enumerate(sounds_page, start=start):
        inline_keyboard.add(
            InlineKeyboardButton(text=f"üóë {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}", callback_data=f"remove_sound_{i}"),
            InlineKeyboardButton(text=f"‚úèÔ∏è {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}", callback_data=f"rename_sound_{i}")
        )

    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'page_{page-1}'))
    if end < len(SOUND_URLS):
        nav_buttons.append(InlineKeyboardButton(text='‚û°Ô∏è –í–ø–µ—Ä—ë–¥', callback_data=f'page_{page+1}'))
    if nav_buttons:
        inline_keyboard.row(*nav_buttons)

    await message.answer(text, reply_markup=inline_keyboard)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
@dp.message()
async def handle_buttons(message: Message):
    if message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫':
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_sound <—Å—Å—ã–ª–∫–∞> [–Ω–∞–∑–≤–∞–Ω–∏–µ]')
    elif message.text == 'üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤':
        await send_sounds_page(message, page=0)

@dp.callback_query(lambda c: c.data.startswith('page_'))
async def callback_page(callback: CallbackQuery):
    page = int(callback.data.split('_')[1])
    await send_sounds_page(callback.message, page)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("remove_sound_"))
async def callback_remove_sound(callback: CallbackQuery):
    global SOUND_URLS
    idx = int(callback.data.split("_")[-1])
    if 0 <= idx < len(SOUND_URLS):
        removed = SOUND_URLS.pop(idx)
        with open(SOUNDS_FILE, 'w') as f:
            json.dump(SOUND_URLS, f)
        name = removed.get('name') or removed['url']
        await callback.message.edit_text(f"üóë –ó–≤—É–∫ —É–¥–∞–ª—ë–Ω: {name}", reply_markup=None)
        await callback.answer("–ó–≤—É–∫ —É–¥–∞–ª—ë–Ω")

@dp.callback_query(lambda c: c.data.startswith("rename_sound_"))
async def callback_rename_sound(callback: CallbackQuery):
    idx = int(callback.data.split("_")[-1])
    if 0 <= idx < len(SOUND_URLS):
        rename_state[callback.from_user.id] = idx
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–≤—É–∫–∞:")
        await callback.answer()

@dp.message()
async def handle_rename(message: Message):
    if message.from_user.id in rename_state:
        idx = rename_state.pop(message.from_user.id)
        SOUND_URLS[idx]['name'] = message.text
        with open(SOUNDS_FILE, 'w') as f:
            json.dump(SOUND_URLS, f)
        await message.answer(f"‚úÖ –ó–≤—É–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {message.text}")
        return

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main():
    asyncio.create_task(check_new_videos())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
