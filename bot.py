import asyncio import requests from bs4 import BeautifulSoup from datetime import datetime, timedelta from aiogram import Bot, Dispatcher, types from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery from aiogram.filters import Command import os, json

=== –ù–ê–°–¢–†–û–ô–ö–ò ===

TOKEN = os.getenv("TOKEN", "8098428478:AAGJJKaREHjQgGPFudgyH1pc_UzzqJUrcgE")  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é CHECK_INTERVAL = 300  # –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å (—Å–µ–∫—É–Ω–¥) HISTORY_FILE = 'seen_videos.json'

bot = Bot(token=TOKEN) dp = Dispatcher()

–•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ

seen_videos = set() SOUND_URL = None OWNER_ID = None

–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏

if os.path.exists(HISTORY_FILE): with open(HISTORY_FILE, 'r') as f: try: seen_videos = set(json.load(f)) except: seen_videos = set()

–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

keyboard = ReplyKeyboardMarkup( keyboard=[ [KeyboardButton('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤—É–∫'), KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–≤—É–∫')], [KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–≤—É–∫')] ], resize_keyboard=True )

async def check_new_videos(): global seen_videos, SOUND_URL while True: if SOUND_URL: try: r = requests.get(SOUND_URL, headers={"User-Agent": "Mozilla/5.0"}) soup = BeautifulSoup(r.text, "html.parser")

video_elements = soup.find_all("a", href=True)
            for a in video_elements:
                if "/video/" in a["href"]:
                    video_url = a["href"]
                    time_tag = a.find_next("span")
                    try:
                        video_time = datetime.strptime(time_tag.text.strip(), '%Y-%m-%d %H:%M')
                    except:
                        video_time = datetime.now()

                    if video_url not in seen_videos and video_time > datetime.now() - timedelta(days=1):
                        seen_videos.add(video_url)
                        with open(HISTORY_FILE, 'w') as f:
                            json.dump(list(seen_videos), f)

                        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –≤–∏–¥–µ–æ
                        try:
                            r_video = requests.get(video_url, headers={"User-Agent": "Mozilla/5.0"})
                            soup_video = BeautifulSoup(r_video.text, "html.parser")
                            meta_thumb = soup_video.find("meta", property="og:image")
                            thumbnail_url = meta_thumb["content"] if meta_thumb else None
                        except:
                            thumbnail_url = None

                        # –ö–Ω–æ–ø–∫–∏: –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –∏ —É–¥–∞–ª–∏—Ç—å –∑–≤—É–∫
                        keyboard_inline = InlineKeyboardMarkup(
                            inline_keyboard=[
                                [InlineKeyboardButton(text="‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ TikTok", url=video_url)],
                                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–≤—É–∫", callback_data="remove_sound")]
                            ]
                        )

                        if thumbnail_url:
                            await bot.send_photo(
                                chat_id=OWNER_ID,
                                photo=thumbnail_url,
                                caption="üÜï –ù–æ–≤—ã–π —Ä–æ–ª–∏–∫ –ø–æ–¥ —Ç–≤–æ–π –∑–≤—É–∫!",
                                reply_markup=keyboard_inline
                            )
                        else:
                            await bot.send_message(
                                chat_id=OWNER_ID,
                                text="üÜï –ù–æ–≤—ã–π —Ä–æ–ª–∏–∫ –ø–æ–¥ —Ç–≤–æ–π –∑–≤—É–∫!",
                                reply_markup=keyboard_inline
                            )

        except Exception as e:
            print("–û—à–∏–±–∫–∞:", e)

    await asyncio.sleep(CHECK_INTERVAL)

@dp.message(Command("start")) async def start_cmd(message: Message): global OWNER_ID OWNER_ID = message.chat.id await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=keyboard)

@dp.message(Command("set_sound")) async def set_sound_cmd(message: Message): global SOUND_URL, seen_videos parts = message.text.split() if len(parts) == 2: SOUND_URL = parts[1] seen_videos = set()  # —Å–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∏–¥–µ–æ with open(HISTORY_FILE, 'w') as f: json.dump(list(seen_videos), f) await message.answer(f"‚úÖ –ó–≤—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {SOUND_URL}") else: await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_sound <—Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤—É–∫>")

@dp.message(Command("remove_sound")) async def remove_sound_cmd(message: Message): global SOUND_URL SOUND_URL = None await message.answer("üóë –ó–≤—É–∫ —É–¥–∞–ª—ë–Ω")

@dp.callback_query(lambda c: c.data == "remove_sound") async def callback_remove_sound(callback: CallbackQuery): global SOUND_URL SOUND_URL = None await callback.message.edit_caption( caption="‚ùå –ó–≤—É–∫ —É–¥–∞–ª—ë–Ω", reply_markup=None ) if callback.message.photo else await callback.message.edit_text( text="‚ùå –ó–≤—É–∫ —É–¥–∞–ª—ë–Ω", reply_markup=None ) await callback.answer("–ó–≤—É–∫ —É–¥–∞–ª—ë–Ω")

@dp.message() async def handle_buttons(message: Message): if message.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤—É–∫': await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /set_sound <—Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤—É–∫>') elif message.text == '–£–¥–∞–ª–∏—Ç—å –∑–≤—É–∫': await remove_sound_cmd(message) elif message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–≤—É–∫': if SOUND_URL: await message.answer(f"–¢–µ–∫—É—â–∏–π –∑–≤—É–∫: {SOUND_URL}") else: await message.answer("–ó–≤—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main(): asyncio.create_task(check_new_videos()) await dp.start_polling(bot)

if name == "main": asyncio.run(main())

