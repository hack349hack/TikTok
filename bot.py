import asyncio
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8098428478:AAGJJKaREHjQgGPFudgyH1pc_UzzqJUrcgE"  # –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –æ—Ç BotFather
CHECK_INTERVAL = 300  # –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å (—Å–µ–∫—É–Ω–¥)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º ID —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ, —Ç–µ–∫—É—â–∏–π –∑–≤—É–∫ –∏ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
seen_videos = set()
video_dates = dict()
SOUND_URL = None
OWNER_ID = None

async def check_new_videos():
    global seen_videos, SOUND_URL, video_dates
    while True:
        if SOUND_URL:
            try:
                r = requests.get(SOUND_URL, headers={"User-Agent": "Mozilla/5.0"})
                soup = BeautifulSoup(r.text, "html.parser")

                # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –∏ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                video_elements = soup.find_all("a", href=True)
                for a in video_elements:
                    if "/video/" in a["href"]:
                        video_url = a["href"]
                        # –ó–¥–µ—Å—å –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑ data-time –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                        time_tag = a.find_next("span")
                        try:
                            video_time = datetime.strptime(time_tag.text.strip(), '%Y-%m-%d %H:%M')
                        except:
                            video_time = datetime.now()  # –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

                        if video_url not in seen_videos and video_time > datetime.now() - timedelta(days=1):
                            seen_videos.add(video_url)
                            await bot.send_message(chat_id=OWNER_ID, text=f"üÜï –ù–æ–≤—ã–π —Ä–æ–ª–∏–∫ –ø–æ–¥ —Ç–≤–æ–π –∑–≤—É–∫: {video_url}")

            except Exception as e:
                print("–û—à–∏–±–∫–∞:", e)

        await asyncio.sleep(CHECK_INTERVAL)

@dp.message(Command("start"))
async def start_cmd(message: Message):
    global OWNER_ID
    OWNER_ID = message.chat.id
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /set_sound <—Å—Å—ã–ª–∫–∞> —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –∑–≤—É–∫.")

@dp.message(Command("set_sound"))
async def set_sound_cmd(message: Message):
    global SOUND_URL, seen_videos
    parts = message.text.split()
    if len(parts) == 2:
        SOUND_URL = parts[1]
        seen_videos = set()  # —Å–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∏–¥–µ–æ
        await message.answer(f"‚úÖ –ó–≤—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {SOUND_URL}")
    else:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_sound <—Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤—É–∫>")

async def main():
    asyncio.create_task(check_new_videos())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
