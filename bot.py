import os
import asyncio
import logging
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# === –ù–ê–°–¢–†–û–ô–ö–ò –ß–ï–†–ï–ó –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Üí 0
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "60"))  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥

if not API_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

# –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤ (–ø—Ä–∏–º–µ—Ä)
SOUND_URLS = [
    {"name": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∑–≤—É–∫", "url": "https://www.tiktok.com/music/sound-12345"},
    {"name": "–í–µ—Å—ë–ª—ã–π –±–∏—Ç", "url": "https://www.tiktok.com/music/sound-67890"},
]

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
seen_videos = {s["url"]: [] for s in SOUND_URLS}

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)

# === –ë–û–¢ ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê ---
def get_latest_videos(sound_url: str, limit: int = 5):
    """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∑–≤—É–∫"""
    try:
        r = requests.get(sound_url, headers={"User-Agent": "Mozilla/5.0"})
        soup = BeautifulSoup(r.text, "html.parser")
        video_elements = [a["href"] for a in soup.find_all("a", href=True) if "/video/" in a["href"]]
        return video_elements[:limit]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {sound_url}: {e}")
        return []


# --- –ö–û–ú–ê–ù–î–ê START ---
@dp.message(F.text == "/start")
async def start_cmd(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤", callback_data="list_sounds")],
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –ø–æ–º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∏–¥–µ–æ –ø–æ –∑–≤—É–∫–∞–º TikTok.", reply_markup=kb)


# --- –°–ü–ò–°–û–ö –ó–í–£–ö–û–í ---
@dp.callback_query(F.data == "list_sounds")
async def list_sounds(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup()
    for idx, sound in enumerate(SOUND_URLS):
        kb.add(
            InlineKeyboardButton(text=f"üéµ {sound['name']}", callback_data=f"sound_{idx}")
        )
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∑–≤—É–∫:", reply_markup=kb)
    await callback.answer()


# --- –í–´–ë–û–† –ó–í–£–ö–ê ---
@dp.callback_query(F.data.startswith("sound_"))
async def sound_options(callback: types.CallbackQuery):
    idx = int(callback.data.split("_")[1])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üïì 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö (–∏—Å—Ç–æ—Ä–∏—è)", callback_data=f"history_{idx}")],
        [InlineKeyboardButton(text="‚ú® 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö (–Ω–æ–≤–æ–µ)", callback_data=f"latest_{idx}")],
    ])
    await callback.message.answer(f"üéµ {SOUND_URLS[idx]['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await callback.answer()


# --- –ò–°–¢–û–†–ò–Ø (–∏–∑ seen_videos) ---
@dp.callback_query(F.data.startswith("history_"))
async def show_history(callback: types.CallbackQuery):
    idx = int(callback.data.split("_")[1])
    sound = SOUND_URLS[idx]
    videos = seen_videos.get(sound["url"], [])[:5]

    if not videos:
        await callback.message.answer("‚ùå –í –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ")
    else:
        text = f"üé¨ –ò—Å—Ç–æ—Ä–∏—è 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ ({sound['name']}):\n"
        for i, v in enumerate(videos, start=1):
            text += f"{i}. {v}\n"
        await callback.message.answer(text)

    await callback.answer()


# --- –ù–û–í–´–ï (–ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞) ---
@dp.callback_query(F.data.startswith("latest_"))
async def show_latest(callback: types.CallbackQuery):
    idx = int(callback.data.split("_")[1])
    sound = SOUND_URLS[idx]
    videos = get_latest_videos(sound["url"])

    if not videos:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ")
    else:
        text = f"‚ú® 5 –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ ({sound['name']}):\n"
        for i, v in enumerate(videos, start=1):
            text += f"{i}. {v}\n"
        await callback.message.answer(text)

    await callback.answer()


# --- –§–û–ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
async def check_new_videos():
    if ADMIN_ID:
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ")
    while True:
        for sound in SOUND_URLS:
            latest = get_latest_videos(sound["url"], limit=1)
            if latest:
                last_video = latest[0]
                if last_video not in seen_videos[sound["url"]]:
                    seen_videos[sound["url"]].insert(0, last_video)
                    if ADMIN_ID:
                        await bot.send_message(ADMIN_ID, f"üîî –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ ({sound['name']}): {last_video}")
        await asyncio.sleep(CHECK_INTERVAL)


# --- –ó–ê–ü–£–°–ö ---
async def main():
    asyncio.create_task(check_new_videos())  # —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
