import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from TikTokApi import TikTokApi

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –£–∫–∞–∂–∏ TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
OWNER_ID = None
SOUND_URLS = []  # —Å—é–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–≤—É–∫–∏
SEEN_VIDEOS = {}  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–∏–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class AddSoundStates(StatesGroup):
    waiting_for_url = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data="add_sound"),
             InlineKeyboardButton("üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤", callback_data="list_sounds")]
        ]
    )

def build_sounds_keyboard():
    kb = []
    for idx, sound in enumerate(SOUND_URLS):
        kb.append([InlineKeyboardButton(f"üé¨ {sound}", callback_data=f"check_{idx}")])
    kb.append([InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def build_videos_keyboard(videos):
    kb = []
    for v in videos:
        kb.append([InlineKeyboardButton("‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å", url=v)])
    kb.append([InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ ---
async def check_new_videos():
    api = TikTokApi()
    while True:
        for idx, sound_url in enumerate(SOUND_URLS):
            try:
                videos = api.by_sound(sound_url, count=5)
                new_items = []
                for video in videos:
                    url = video['video']['playAddr']
                    if sound_url not in SEEN_VIDEOS:
                        SEEN_VIDEOS[sound_url] = set()
                    if url not in SEEN_VIDEOS[sound_url]:
                        SEEN_VIDEOS[sound_url].add(url)
                        new_items.append(url)
                if new_items and OWNER_ID:
                    for item in new_items:
                        await bot.send_message(
                            chat_id=OWNER_ID,
                            text=f"üÜï –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ –ø–æ–¥ –∑–≤—É–∫–æ–º {sound_url}\n{item}",
                            reply_markup=build_videos_keyboard(new_items)
                        )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è {sound_url}: {e}")
        await asyncio.sleep(60)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    global OWNER_ID
    OWNER_ID = message.chat.id
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=get_main_keyboard())

@dp.callback_query(lambda c: c.data == "add_sound")
async def add_sound(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–≤—É–∫ TikTok:")
    await state.set_state(AddSoundStates.waiting_for_url)
    await callback.answer()

@dp.message(AddSoundStates.waiting_for_url)
async def add_sound_url(message: types.Message, state: FSMContext):
    SOUND_URLS.append(message.text)
    await message.answer(f"‚úÖ –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {message.text}", reply_markup=get_main_keyboard())
    await state.clear()

@dp.callback_query(lambda c: c.data == "list_sounds")
async def list_sounds(callback: types.CallbackQuery):
    if not SOUND_URLS:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    else:
        await callback.message.answer("üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤:", reply_markup=build_sounds_keyboard())
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("check_"))
async def show_videos(callback: types.CallbackQuery):
    idx = int(callback.data.split("_")[1])
    sound_url = SOUND_URLS[idx]
    api = TikTokApi()
    try:
        videos = api.by_sound(sound_url, count=5)
        video_urls = [v['video']['playAddr'] for v in videos]
        await callback.message.answer(
            f"üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ –ø–æ–¥ –∑–≤—É–∫–æ–º {sound_url}:",
            reply_markup=build_videos_keyboard(video_urls)
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "main")
async def go_main(callback: types.CallbackQuery):
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    await callback.answer()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(check_new_videos())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
