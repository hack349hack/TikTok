import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–£–∫–∞–∂–∏ TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ---
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)

OWNER_ID = None
rename_state = {}
SOUND_URLS = []  # [{'url': '...', 'name': '...'}]

# === FSM –°–û–°–¢–û–Ø–ù–ò–Ø ===
class AddSoundStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_name = State()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def get_main_keyboard():
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data="add_sound"),
                InlineKeyboardButton(text="üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤", callback_data="list_sounds")
            ]
        ]
    )
    return kb

def build_sounds_keyboard():
    kb = InlineKeyboardMarkup()
    for i, sound in enumerate(SOUND_URLS):
        name = sound.get("name") or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        kb.add(
            InlineKeyboardButton(text=f"üóë {name}", callback_data=f"remove_sound_{i}"),
            InlineKeyboardButton(text=f"‚úèÔ∏è {name}", callback_data=f"rename_sound_{i}"),
            InlineKeyboardButton(text=f"üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–∏–¥–µ–æ", callback_data=f"last_videos_{i}")
        )
    return kb

# === Selenium: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ ===
def get_latest_items(sound_url: str, count: int = 5):
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(options=options)
    
    videos = []
    photos = []

    try:
        logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º {sound_url}")
        driver.get(sound_url)
        driver.implicitly_wait(5)

        # –í–∏–¥–µ–æ
        video_elements = driver.find_elements(By.XPATH, '//a[contains(@href, "/video/")]')
        video_data = []
        for elem in video_elements:
            url = elem.get_attribute("href")
            try:
                timestamp = int(elem.get_attribute("data-e2e-ts"))
            except:
                timestamp = 0
            video_data.append((url, timestamp))
        video_data.sort(key=lambda x: x[1], reverse=True)
        videos = [v[0] for v in video_data[:count]]

        # –§–æ—Ç–æ
        photo_elements = driver.find_elements(By.XPATH, '//a[contains(@href, "/photo/")]')
        photo_data = []
        for elem in photo_elements:
            url = elem.get_attribute("href")
            try:
                timestamp = int(elem.get_attribute("data-e2e-ts"))
            except:
                timestamp = 0
            photo_data.append((url, timestamp))
        photo_data.sort(key=lambda x: x[1], reverse=True)
        photos = [p[0] for p in photo_data[:count]]

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {len(videos)}, —Ñ–æ—Ç–æ: {len(photos)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
    finally:
        driver.quit()

    return videos, photos

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    global OWNER_ID
    OWNER_ID = message.chat.id
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=get_main_keyboard())

@dp.callback_query(lambda c: c.data == "add_sound")
async def add_sound_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–≤—É–∫ TikTok:")
    await state.set_state(AddSoundStates.waiting_for_url)
    await callback.answer()

@dp.message(AddSoundStates.waiting_for_url)
async def add_sound_get_url(message: types.Message, state: FSMContext):
    await state.update_data(url=message.text)
    await message.answer("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(AddSoundStates.waiting_for_name)

@dp.message(AddSoundStates.waiting_for_name)
async def add_sound_get_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    url = data['url']
    name = message.text if message.text.lower() != '–Ω–µ—Ç' else None
    SOUND_URLS.append({'url': url, 'name': name})
    await message.answer(f"‚úÖ –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {name or url}", reply_markup=get_main_keyboard())
    await state.clear()

@dp.callback_query(lambda c: c.data == "list_sounds")
async def list_sounds_cb(callback: CallbackQuery):
    kb = build_sounds_keyboard()
    if kb.inline_keyboard:
        await callback.message.answer("üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤:", reply_markup=kb)
    else:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("remove_sound_"))
async def remove_sound_cb(callback: CallbackQuery):
    idx = int(callback.data.split("_")[-1])
    if 0 <= idx < len(SOUND_URLS):
        removed = SOUND_URLS.pop(idx)
        await callback.message.edit_text(f"üóë –ó–≤—É–∫ —É–¥–∞–ª—ë–Ω: {removed.get('name') or removed['url']}", reply_markup=get_main_keyboard())
        await callback.answer()

rename_state = {}
@dp.callback_query(lambda c: c.data.startswith("rename_sound_"))
async def rename_sound_cb(callback: CallbackQuery):
    idx = int(callback.data.split("_")[-1])
    if 0 <= idx < len(SOUND_URLS):
        rename_state[callback.from_user.id] = idx
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–≤—É–∫–∞:")
        await callback.answer()

@dp.message()
async def handle_rename(message: types.Message):
    if message.from_user.id in rename_state:
        idx = rename_state.pop(message.from_user.id)
        SOUND_URLS[idx]['name'] = message.text
        await message.answer(f"‚úÖ –ó–≤—É–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {message.text}", reply_markup=get_main_keyboard())
        return

@dp.callback_query(lambda c: c.data.startswith("last_videos_"))
async def last_videos_cb(callback: CallbackQuery):
    idx = int(callback.data.split("_")[-1])
    sound = SOUND_URLS[idx]
    videos, photos = get_latest_items(sound['url'], count=5)
    if not videos and not photos:
        await callback.answer("‚ùå –í–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
        return

    text = f"üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ–¥ –∑–≤—É–∫–æ–º {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}:\n"
    for i, v in enumerate(videos, start=1):
        text += f"{i}. {v}\n"
    if photos:
        text += "\nüì∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ:\n"
        for i, p in enumerate(photos, start=1):
            text += f"{i}. {p}\n"

    await callback.message.answer(text)
    await callback.answer()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ –∫–∞–∂–¥—ã–µ CHECK_INTERVAL —Å–µ–∫—É–Ω–¥ ===
async def check_new_content():
    last_seen = {}  # sound_url -> set of urls
    while True:
        for sound in SOUND_URLS:
            sound_url = sound['url']
            videos, photos = get_latest_items(sound_url, count=5)
            new_items = []
            prev_seen = last_seen.get(sound_url, set())
            for v in videos + photos:
                if v not in prev_seen:
                    new_items.append(v)
            if new_items and OWNER_ID:
                text = f"üÜï –ù–æ–≤—ã–µ –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ –ø–æ–¥ –∑–≤—É–∫–æ–º {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}:\n"
                for i, item in enumerate(new_items, start=1):
                    text += f"{i}. {item}\n"
                await bot.send_message(chat_id=OWNER_ID, text=text)
            last_seen[sound_url] = set(videos + photos)
        await asyncio.sleep(CHECK_INTERVAL)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    asyncio.create_task(check_new_content())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
