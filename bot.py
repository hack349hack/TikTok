import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")  # –∫–æ–º—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
if not BOT_TOKEN:
    raise ValueError("‚ùå –£–∫–∞–∂–∏ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
SOUND_URLS = [
    "https://www.tiktok.com/music/original-sound-1234567890",
    "https://www.tiktok.com/music/original-sound-9876543210"
]
CHECK_INTERVAL = 60  # —Ä–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ---
last_videos = {url: [] for url in SOUND_URLS}


# ==== –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ TikTok ====
async def fetch_last_videos(sound_url, limit=5):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ TikTok.
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä API / playwright / selenium.
    –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏.
    """
    # —ç–º—É–ª—è—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–µ–æ –ø–æ –∑–≤—É–∫—É
    return [f"{sound_url}?video={i}" for i in range(1, limit + 1)]


# ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ ====
async def check_new_videos():
    while True:
        for sound in SOUND_URLS:
            try:
                new_videos = await fetch_last_videos(sound)
                old = set(last_videos.get(sound, []))
                fresh = [v for v in new_videos if v not in old]

                if fresh:
                    last_videos[sound] = new_videos
                    for video in fresh:
                        msg = f"üì¢ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –ø–æ –∑–≤—É–∫—É:\n{sound}\n‚ñ∂ {video}"
                        if CHAT_ID:
                            await bot.send_message(CHAT_ID, msg)
                        else:
                            logging.warning("CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–≤—É–∫–∞ {sound}: {e}")

        await asyncio.sleep(CHECK_INTERVAL)


# ==== –ö–Ω–æ–ø–∫–∏ ====
def main_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéµ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ", callback_data="last5")],
        [InlineKeyboardButton(text="üéß –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤", callback_data="list_sounds")]
    ])
    return kb


# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ====
@dp.message(F.text == "/start")
async def start_cmd(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø TikTok –±–æ—Ç.\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())


@dp.callback_query(F.data == "last5")
async def last5_videos(callback: types.CallbackQuery):
    text = "üéµ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–≤—É–∫—É:\n\n"
    for sound in SOUND_URLS:
        videos = await fetch_last_videos(sound, 5)
        last_videos[sound] = videos
        text += f"\nüîä {sound}\n"
        for v in videos:
            text += f"‚ñ∂ {v}\n"
    await callback.message.answer(text)
    await callback.answer()


@dp.callback_query(F.data == "list_sounds")
async def list_sounds(callback: types.CallbackQuery):
    if not SOUND_URLS:
        await callback.message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å —Å—Å—ã–ª–∫–∏ –≤ SOUND_URLS.")
        await callback.answer()
        return

    text = "üéß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–≤—É–∫–∏:\n\n"
    for i, url in enumerate(SOUND_URLS, start=1):
        text += f"{i}. {url}\n"

    if len(text) > 4000:  # –∑–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∞—à–∞
        text = text[:4000] + "\n... –æ–±—Ä–µ–∑–∞–Ω–æ"

    await callback.message.answer(text)
    await callback.answer()


# ==== –ó–∞–ø—É—Å–∫ ====
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(check_new_videos())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
