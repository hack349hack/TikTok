import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from TikTokApi import TikTokApi

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

OWNER_ID = None
sound_list = []  # –°—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä–∏ {'url':..., 'name':...}
rename_state = {}

# --- FSM ---
class AddSoundStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_name = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data="add_sound")],
        [InlineKeyboardButton(text="üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤", callback_data="list_sounds")]
    ])
    return kb

def sounds_keyboard():
    kb = InlineKeyboardMarkup()
    for i, sound in enumerate(sound_list):
        kb.add(InlineKeyboardButton(text=f"{i+1}. {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}", callback_data=f"show_{i}"))
    kb.add(InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_main"))
    return kb

def back_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_main")]
    ])

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    global OWNER_ID
    OWNER_ID = message.chat.id
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=main_keyboard())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞ ---
@dp.callback_query(lambda c: c.data == "add_sound")
async def add_sound_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–≤—É–∫ TikTok:")
    await state.set_state(AddSoundStates.waiting_for_url)
    await callback.answer()

@dp.message(AddSoundStates.waiting_for_url)
async def add_sound_url(message: types.Message, state: FSMContext):
    await state.update_data(url=message.text)
    await message.answer("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(AddSoundStates.waiting_for_name)

@dp.message(AddSoundStates.waiting_for_name)
async def add_sound_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    url = data['url']
    name = message.text if message.text.lower() != '–Ω–µ—Ç' else None
    sound_list.append({'url': url, 'name': name})
    await message.answer(f"‚úÖ –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {name or url}", reply_markup=main_keyboard())
    await state.clear()

# --- –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤ ---
@dp.callback_query(lambda c: c.data == "list_sounds")
async def list_sounds_cb(callback: CallbackQuery):
    if not sound_list:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    else:
        await callback.message.edit_text("üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤:", reply_markup=sounds_keyboard())
    await callback.answer()

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ ---
@dp.callback_query(lambda c: c.data.startswith("show_"))
async def show_sound_cb(callback: CallbackQuery):
    idx = int(callback.data.split("_")[1])
    sound = sound_list[idx]
    url = sound['url']

    try:
        async with TikTokApi() as api:
            posts = api.by_sound(url, count=5)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}", reply_markup=back_main_keyboard())
        await callback.answer()
        return

    if not posts:
        await callback.message.answer("‚ùå –í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ—Ç", reply_markup=back_main_keyboard())
        await callback.answer()
        return

    text = f"üé¨ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–¥ –∑–≤—É–∫–æ–º {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}:\n"
    for i, p in enumerate(posts, start=1):
        text += f"{i}. https://www.tiktok.com/@{p.author.username}/video/{p.id}\n"

    await callback.message.answer(text, reply_markup=back_main_keyboard())
    await callback.answer()

# --- –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ---
@dp.callback_query(lambda c: c.data == "back_main")
async def back_main_cb(callback: CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    await callback.answer()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
