import os
import json
import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

# ===== –õ–û–ì–ò =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
TOKEN = os.getenv("TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
HISTORY_FILE = "seen_videos.json"
SOUNDS_FILE = "sounds.json"
SOUNDS_PER_PAGE = 5

storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)

OWNER_ID = None
rename_state = {}
seen_videos = {}
SOUND_URLS = []

# ===== –ó–ê–ì–†–£–ó–ö–ê JSON =====
if os.path.exists(HISTORY_FILE):
    with open(HISTORY_FILE, "r") as f:
        seen_videos = json.load(f)

if os.path.exists(SOUNDS_FILE):
    with open(SOUNDS_FILE, "r") as f:
        SOUND_URLS = json.load(f)

# ===== FSM –°–û–°–¢–û–Ø–ù–ò–Ø =====
class AddSoundStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_name = State()

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data="add_sound"),
             InlineKeyboardButton("üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤", callback_data="list_sounds")]
        ]
    )

def build_sounds_keyboard(page: int = 0):
    start = page * SOUNDS_PER_PAGE
    end = start + SOUNDS_PER_PAGE
    sounds_page = SOUND_URLS[start:end]
    if not sounds_page:
        return None

    inline_keyboard = []
    for i, sound in enumerate(sounds_page, start=start):
        inline_keyboard.append([
            InlineKeyboardButton(f"üóë {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}", callback_data=f"remove_sound_{i}"),
            InlineKeyboardButton(f"‚úèÔ∏è {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}", callback_data=f"rename_sound_{i}"),
            InlineKeyboardButton("üé¨ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ", callback_data=f"last_videos_{i}")
        ])
    inline_keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data="add_sound")])
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

# ===== SELENIUM =====
def get_driver():
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    return driver

async def fetch_latest_videos(url, limit=5):
    try:
        driver = get_driver()
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ URL: {url}")
        driver.get(url)
        asyncio.sleep(2)
        elements = driver.find_elements(By.XPATH, "//a[contains(@href,'/video/')]")
        videos = [e.get_attribute("href") for e in elements]
        driver.quit()
        return videos[:limit]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∏–¥–µ–æ: {e}")
        return []

# ===== –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –í–ò–î–ï–û =====
async def check_new_videos():
    global seen_videos
    while True:
        for idx, sound in enumerate(SOUND_URLS):
            sound_url = sound['url']
            videos = await fetch_latest_videos(sound_url)
            if sound_url not in seen_videos:
                seen_videos[sound_url] = []
            new_videos = [v for v in videos if v not in seen_videos[sound_url]]
            for v in new_videos:
                seen_videos[sound_url].append(v)
                logger.info(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ä–æ–ª–∏–∫ –ø–æ–¥ –∑–≤—É–∫–æ–º {sound.get('name')}: {v}")
                if OWNER_ID:
                    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ TikTok", url=v))
                    await bot.send_message(chat_id=OWNER_ID, text=f"üÜï –ù–æ–≤—ã–π —Ä–æ–ª–∏–∫: {sound.get('name')}", reply_markup=keyboard)
            with open(HISTORY_FILE, "w") as f:
                json.dump(seen_videos, f)
        await asyncio.sleep(CHECK_INTERVAL)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@dp.message(Command("start"))
async def start_cmd(message: Message):
    global OWNER_ID
    OWNER_ID = message.chat.id
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=get_main_keyboard())

@dp.callback_query(lambda c: c.data == "add_sound")
async def add_sound_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–≤—É–∫ TikTok:")
    await state.set_state(AddSoundStates.waiting_for_url)
    await callback.answer()

@dp.message(AddSoundStates.waiting_for_url)
async def add_sound_url(message: Message, state: FSMContext):
    await state.update_data(url=message.text)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞ –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(AddSoundStates.waiting_for_name)

@dp.message(AddSoundStates.waiting_for_name)
async def add_sound_name(message: Message, state: FSMContext):
    data = await state.get_data()
    url = data['url']
    name = message.text if message.text.lower() != "–Ω–µ—Ç" else None
    SOUND_URLS.append({"url": url, "name": name})
    with open(SOUNDS_FILE, "w") as f:
        json.dump(SOUND_URLS, f)
    await message.answer(f"‚úÖ –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {name or url}", reply_markup=get_main_keyboard())
    await state.clear()

@dp.callback_query(lambda c: c.data == "list_sounds")
async def list_sounds(callback: CallbackQuery):
    kb = build_sounds_keyboard()
    if kb:
        await callback.message.answer("üìÉ –°–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤:", reply_markup=kb)
    else:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("last_videos_"))
async def last_videos_cb(callback: CallbackQuery):
    idx = int(callback.data.split("_")[-1])
    sound = SOUND_URLS[idx]
    videos = await fetch_latest_videos(sound['url'])
    if not videos:
        await callback.answer("‚ùå –í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
        return
    text = f"üé¨ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–¥ –∑–≤—É–∫–æ–º {sound.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}:\n"
    for i, v in enumerate(videos, 1):
        text += f"{i}. {v}\n"
    await callback.message.answer(text)
    await callback.answer()

# ===== –ó–ê–ü–£–°–ö =====
async def main():
    asyncio.create_task(check_new_videos())
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
